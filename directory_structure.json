{
    "__files__": {
        ".eslintrc.json": null,
        ".gitignore": null,
        "codes.py": null,
        "components.json": null,
        "directory_structure.json": null,
        "next-env.d.ts": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.\n",
        "next.config.mjs": null,
        "package-lock.json": null,
        "package.json": null,
        "postcss.config.mjs": null,
        "README.md": null,
        "tailwind.config.ts": "import type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        slideUp: {\n          \"0%\": { transform: \"translateY(10px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n\nexport default config\n",
        "tsconfig.json": null
    },
    "app": {
        "__files__": {
            "favicon.ico": null,
            "globals.css": null,
            "layout.tsx": "import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport { AuthProvider } from \"@/components/auth-provider\"\nimport { Toaster } from \"sonner\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: \"Game Scheduler\",\n  description: \"Modern game scheduling platform with glassmorphism design\",\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"ko\" className=\"h-full\">\n      <body\n        className={`\n          ${inter.className}\n          h-full\n          bg-gradient-to-br\n          from-purple-900\n          via-blue-900\n          to-indigo-900\n          bg-fixed\n        `}\n      >\n        <AuthProvider>{children}</AuthProvider>\n        <Toaster\n          theme=\"dark\"\n          position=\"top-right\"\n          toastOptions={{\n            style: {\n              background: \"rgba(255, 255, 255, 0.1)\",\n              backdropFilter: \"blur(12px)\",\n              border: \"1px solid rgba(255, 255, 255, 0.2)\",\n              color: \"white\",\n            },\n          }}\n        />\n      </body>\n    </html>\n  )\n}\n",
            "page.tsx": "import { redirect } from \"next/navigation\"\nimport { cookies } from \"next/headers\"\n\nexport default function HomePage() {\n  const cookieStore = cookies()\n  const token = cookieStore.get(\"auth-token\")\n\n  if (token) {\n    redirect(\"/dashboard\")\n  } else {\n    redirect(\"/auth/login\")\n  }\n}\n"
        },
        "auth": {
            "login": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { toast } from \"sonner\"\nimport { authService } from \"@/lib/auth-service\"\nimport { Loader2, GamepadIcon } from \"lucide-react\"\nimport { useEffect } from \"react\"\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n    useEffect(() => {\n    if (authService.isAuthenticated()) {\n      router.replace(\"/dashboard\")\n    }\n  }, [router])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      await authService.login({ username, password })\n      toast.success(\"로그인 성공\", {\n        description: \"환영합니다!\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error) {\n      toast.error(\"로그인 실패\", {\n        description: \"아이디 또는 비밀번호를 확인해주세요.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 glass rounded-2xl mb-4\">\n            <GamepadIcon className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Game Scheduler</h1>\n          <p className=\"text-white/70\">게임 스케줄링 플랫폼에 로그인하세요</p>\n        </div>\n\n        <Card className=\"glass border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">로그인</CardTitle>\n            <CardDescription className=\"text-white/70\">계정 정보를 입력해주세요</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-white\">\n                  사용자명\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50\"\n                  placeholder=\"사용자명을 입력하세요\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white\">\n                  비밀번호\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50\"\n                  placeholder=\"비밀번호를 입력하세요\"\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full glass-button\" disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    로그인 중...\n                  </>\n                ) : (\n                  \"로그인\"\n                )}\n              </Button>\n            </form>\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/70\">\n                계정이 없으신가요?{\" \"}\n                <Link href=\"/auth/signup\" className=\"text-blue-300 hover:text-blue-200 underline\">\n                  회원가입\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
                }
            },
            "signup": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { toast } from \"sonner\"\nimport { authService } from \"@/lib/auth-service\"\nimport { Loader2, GamepadIcon } from \"lucide-react\"\nimport { useEffect } from \"react\"\n\nexport default function SignupPage() {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n    useEffect(() => {\n    // 이미 토큰이 있으면 대시보드로 강제 이동\n    if (authService.isAuthenticated()) {\n      router.replace(\"/dashboard\")\n    }\n  }, [router])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (password !== confirmPassword) {\n      toast.error(\"비밀번호 불일치\", {\n        description: \"비밀번호가 일치하지 않습니다.\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      await authService.signup({ username, password })\n      toast.success(\"회원가입 성공\", {\n        description: \"계정이 생성되었습니다. 로그인해주세요.\",\n      })\n      router.push(\"/auth/login\")\n    } catch (error) {\n      toast.error(\"회원가입 실패\", {\n        description: \"이미 사용 중인 아이디이거나 오류가 발생했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 glass rounded-2xl mb-4\">\n            <GamepadIcon className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Game Scheduler</h1>\n          <p className=\"text-white/70\">새 계정을 만들어보세요</p>\n        </div>\n\n        <Card className=\"glass border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">회원가입</CardTitle>\n            <CardDescription className=\"text-white/70\">새 계정 정보를 입력해주세요</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-white\">\n                  사용자명\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50\"\n                  placeholder=\"사용자명을 입력하세요\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white\">\n                  비밀번호\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50\"\n                  placeholder=\"비밀번호를 입력하세요\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-white\">\n                  비밀번호 확인\n                </Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50\"\n                  placeholder=\"비밀번호를 다시 입력하세요\"\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full glass-button\" disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    가입 중...\n                  </>\n                ) : (\n                  \"회원가입\"\n                )}\n              </Button>\n            </form>\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/70\">\n                이미 계정이 있으신가요?{\" \"}\n                <Link href=\"/auth/login\" className=\"text-blue-300 hover:text-blue-200 underline\">\n                  로그인\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        },
        "dashboard": {
            "__files__": {
                "page.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\nimport { authService } from \"@/lib/auth-service\"\nimport { CreateServerModal } from \"@/components/create-server-modal\"\nimport { SearchServerModal } from \"@/components/search-server-modal\"\nimport { Navbar } from \"@/components/navbar\"\nimport { Plus, Users, Clock } from \"lucide-react\"\nimport { useProtectedRoute } from \"../hooks/useProtectedRoute\"\n\ninterface Server {\n  id: number\n  name: string\n  owner: string\n  members: string[]\n  admins: string[]\n  resetTime: string\n}\n\nexport default function DashboardPage() {\n  useProtectedRoute()\n  \n  const [servers, setServers] = useState<Server[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showSearchModal, setShowSearchModal] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    loadServers()\n  }, [])\n\n  const loadServers = async () => {\n    setIsLoading(true)\n    try {\n      const data = await serverService.getMyServers()\n      setServers(data)\n    } catch (error) {\n      toast.error(\"서버 로드 실패\", { description: \"내 서버 정보를 불러오는데 실패했습니다.\" })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleServerCreated = (newServer: Server) => {\n    setServers(prev => [...prev, newServer])\n    setShowCreateModal(false)\n    toast.success(\"서버 생성 완료\", { description: `${newServer.name} 서버가 생성되었습니다.` })\n  }\n\n  const handleJoinServer = async (serverId: number) => {\n    try {\n      await serverService.joinServer(serverId)\n      await loadServers()\n      toast.success(\"서버 참가 완료\", { description: \"서버에 성공적으로 참가했습니다.\" })\n    } catch {\n      toast.error(\"서버 참가 실패\", { description: \"서버 참가에 실패했습니다.\" })\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white mb-2\">대시보드</h1>\n            <p className=\"text-white/70\">내가 참여한 서버를 관리하고 스케줄을 확인하세요</p>\n          </div>\n          <div className=\"flex\">\n            <Button\n              onClick={() => setShowSearchModal(true)}\n              className=\"mr-2 glass-button hover:bg-white/20 h-12 px-6\"\n            >\n              서버 찾기\n            </Button>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"glass-button hover:bg-white/20 h-12 px-6\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />서버 생성\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {servers.map(server => (\n            <Card\n              key={server.id}\n              className=\"glass bg-white/10 border-white/20 hover:bg-white/20 transition-all duration-300 lg:p-8\"\n            >\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white\">{server.name}</CardTitle>\n                  <Badge variant=\"secondary\" className=\"glass text-white\">\n                    {server.owner === authService.getCurrentUser() ? \"소유자\" : \"멤버\"}\n                  </Badge>\n                </div>\n                <CardDescription className=\"text-white/70\">서버장: {server.owner}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-white/80\">\n                    <Users className=\"mr-2 h-4 w-4\" />\n                    <span>{server.members.length}명 참여</span>\n                  </div>\n\n                  {/* resetTime row: left=time, right=입장 버튼 */}\n                  <div className=\"flex items-center justify-between text-white/80\">\n                    <div className=\"flex items-center\">\n                      <Clock className=\"mr-2 h-4 w-4\" />\n                      <span>초기화: {server.resetTime}</span>\n                    </div>\n                    <Button\n                      onClick={() => router.push(`/server/${server.id}`)}\n                      className=\"glass-button hover:bg-white/20 h-15 px-8\"\n                      size=\"sm\"\n                    >\n                      입장\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {servers.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"glass max-w-md mx-auto p-8\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">서버가 없습니다</h3>\n              <p className=\"text-white/70 mb-4\">서버를 찾거나 생성해보세요.</p>\n              <Button\n                onClick={() => setShowSearchModal(true)}\n                className=\"glass-button hover:bg-white/20 h-12 px-6 mr-2\"\n              >\n                서버 찾기\n              </Button>\n              <Button\n                onClick={() => setShowCreateModal(true)}\n                className=\"glass-button hover:bg-white/20 h-12 px-6\"\n              >\n                서버 생성\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CreateServerModal\n        open={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onServerCreated={handleServerCreated}\n      />\n      <SearchServerModal\n        open={showSearchModal}\n        onClose={() => setShowSearchModal(false)}\n        onJoinSuccess={loadServers}\n      />\n    </div>\n  )\n}\n"
            }
        },
        "fonts": {
            "__files__": {
                "GeistMonoVF.woff": null,
                "GeistVF.woff": null
            }
        },
        "hooks": {
            "__files__": {
                "useProtectedRoute.ts": "\"use client\"\nimport { useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { authService } from \"@/lib/auth-service\"\n\nexport function useProtectedRoute() {\n  const router = useRouter()\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      router.replace(\"/auth/login\")\n    }\n  }, [router])\n}\n"
            }
        },
        "server": {
            "[id]": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { Navbar } from \"@/components/navbar\"\nimport { GameManagement } from \"@/components/game-management\"\nimport { TimetableView } from \"@/components/timetable-view\"\nimport { ServerOverview } from \"@/components/server-overview\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\nimport { Card, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { useProtectedRoute } from \"@/app/hooks/useProtectedRoute\"\n\ninterface Server {\n  id: number\n  name: string\n  owner: string\n  members: string[]\n  admins: string[]\n  resetTime: string\n}\n\nexport default function ServerDetailPage() {\n  useProtectedRoute()\n  const params = useParams()\n  const serverId = Number(params.id)\n  const [server, setServer] = useState<Server | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadServer()\n  }, [serverId])\n\n  const loadServer = async () => {\n    try {\n      const data = await serverService.getServer(serverId)\n      setServer(data)\n    } catch (error) {\n      toast.error(\"서버 정보 로드 실패\", {\n        description: \"서버 정보를 불러오는데 실패했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!server) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-white mb-2\">서버를 찾을 수 없습니다</h2>\n            <p className=\"text-white/70\">요청한 서버가 존재하지 않거나 접근 권한이 없습니다.</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* 서버 헤더 */}\n        <Card className=\"glass border-white/20 mb-6\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-white\">{server.name}</CardTitle>\n            <CardDescription className=\"text-white/70\">서버장: {server.owner}</CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* 레이아웃: 타임테이블 (왼쪽 9), 서버 개요+게임 관리 (오른쪽 3) */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 h-auto lg:h-[calc(100vh-200px)]\">\n          {/* 타임테이블 섹션 */}\n          <div className=\"lg:col-span-9\">\n            <TimetableView serverId={serverId} />\n          </div>\n\n          {/* 우측: 서버 개요 + 게임 관리 */}\n          <div className=\"lg:col-span-3 flex flex-col gap-6\">\n            <ServerOverview server={server} onServerUpdate={setServer} />\n            <GameManagement serverId={serverId} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        },
        "stats": {
            "[id]": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Navbar } from \"@/components/navbar\"\nimport { toast } from \"sonner\"\nimport { timetableService } from \"@/lib/timetable-service\"\nimport { Trophy, Clock, TrendingUp, Users } from \"lucide-react\"\nimport { useProtectedRoute } from \"@/app/hooks/useProtectedRoute\"\n\ninterface Stats {\n  topGame: string\n  avgSlot: string\n  peakSlot: string\n  peakCount: number\n}\n\nexport default function StatsPage() {\n  useProtectedRoute()\n  const params = useParams()\n  const serverId = Number.parseInt(params.id as string)\n  const [stats, setStats] = useState<Stats | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadStats()\n  }, [serverId])\n\n  const loadStats = async () => {\n    try {\n      const data = await timetableService.getStats(serverId)\n      setStats(data)\n    } catch (error) {\n      toast.error(\"통계 로드 실패\", {\n        description: \"통계 정보를 불러오는데 실패했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">서버 통계</h1>\n          <p className=\"text-white/70\">게임 플레이 패턴과 인기 시간대를 확인하세요</p>\n        </div>\n\n        {stats ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">최다 플레이 게임</CardTitle>\n                <Trophy className=\"h-4 w-4 text-yellow-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{stats.topGame}</div>\n                <p className=\"text-xs text-white/60\">가장 인기 있는 게임</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">평균 플레이 시간</CardTitle>\n                <Clock className=\"h-4 w-4 text-blue-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {new Date(stats.avgSlot).toLocaleTimeString(\"ko-KR\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </div>\n                <p className=\"text-xs text-white/60\">평균적인 게임 시작 시간</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">피크 시간대</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {new Date(stats.peakSlot).toLocaleTimeString(\"ko-KR\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </div>\n                <p className=\"text-xs text-white/60\">가장 활발한 시간대</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">피크 참여자 수</CardTitle>\n                <Users className=\"h-4 w-4 text-purple-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{stats.peakCount}명</div>\n                <p className=\"text-xs text-white/60\">최대 동시 참여자</p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <div className=\"glass-card max-w-md mx-auto\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">통계 데이터 없음</h3>\n              <p className=\"text-white/70\">아직 충분한 데이터가 없습니다. 게임을 예약해보세요!</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        }
    },
    "components": {
        "__files__": {
            "auth-provider.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport { authService } from \"@/lib/auth-service\"\n\ninterface AuthContextType {\n  user: string | null\n  isLoading: boolean\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: true,\n})\n\nexport const useAuth = () => useContext(AuthContext)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const router = useRouter()\n  const pathname = usePathname()\n\n  useEffect(() => {\n    const token = authService.getToken()\n    const currentUser = authService.getCurrentUser()\n\n    if (token && currentUser) {\n      setUser(currentUser)\n    } else if (!pathname.startsWith(\"/auth\")) {\n      router.push(\"/auth/login\")\n    }\n\n    setIsLoading(false)\n  }, [pathname, router])\n\n  return <AuthContext.Provider value={{ user, isLoading }}>{children}</AuthContext.Provider>\n}\n",
            "create-server-modal.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface CreateServerModalProps {\n  open: boolean\n  onClose: () => void\n  onServerCreated: (server: any) => void\n}\n\nexport function CreateServerModal({ open, onClose, onServerCreated }: CreateServerModalProps) {\n  const [name, setName] = useState(\"\")\n  const [resetTime, setResetTime] = useState(\"06:00\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const server = await serverService.createServer({\n        name,\n        resetTime,\n      })\n      onServerCreated(server)\n      setName(\"\")\n      setResetTime(\"06:00\")\n    } catch (error) {\n      toast.error(\"서버 생성 실패\", {\n        description: \"서버 생성 중 오류가 발생했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass border-white/20\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">새 서버 생성</DialogTitle>\n          <DialogDescription className=\"text-white/70\">새로운 게임 서버를 생성합니다.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"text-white\">\n              서버 이름\n            </Label>\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"glass border-white/30 text-white placeholder:text-white/50\"\n              placeholder=\"서버 이름을 입력하세요\"\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"resetTime\" className=\"text-white\">\n              초기화 시간\n            </Label>\n            <Input\n              id=\"resetTime\"\n              type=\"time\"\n              value={resetTime}\n              onChange={(e) => setResetTime(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              required\n            />\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"glass border-white/30 text-white hover:bg-white/10\"\n            >\n              취소\n            </Button>\n            <Button type=\"submit\" className=\"glass-button\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  생성 중...\n                </>\n              ) : (\n                \"생성\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
            "game-management.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"sonner\"\nimport { gameService } from \"@/lib/game-service\"\nimport { Plus, Trash2, Gamepad2 } from \"lucide-react\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface GameManagementProps {\n  serverId: number\n}\n\nexport function GameManagement({ serverId }: GameManagementProps) {\n  const [defaultGames, setDefaultGames] = useState<Game[]>([])\n  const [customGames, setCustomGames] = useState<Game[]>([])\n  const [newGameName, setNewGameName] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Deletion modal state\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [deletingGameId, setDeletingGameId] = useState<number | null>(null)\n  const [deletingGameName, setDeletingGameName] = useState<string>(\"\")\n  const [scheduledUsers, setScheduledUsers] = useState<string[]>([])\n\n  useEffect(() => {\n    loadGames()\n  }, [serverId])\n\n  const loadGames = async () => {\n    setIsLoading(true)\n    try {\n      const [defaultData, customData] = await Promise.all([\n        gameService.getDefaultGames(),\n        gameService.getCustomGames(serverId),\n      ])\n      setDefaultGames(defaultData.defaultGames)\n      setCustomGames(customData.customGames)\n    } catch (error) {\n      toast.error(\"게임 목록 로드 실패\", { description: \"게임 목록을 불러오는데 실패했습니다.\" })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAddCustomGame = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!newGameName.trim()) return\n    try {\n      const newGame = await gameService.addCustomGame(serverId, { name: newGameName })\n      setCustomGames(prev => [...prev, newGame])\n      setNewGameName(\"\")\n      toast.success(\"게임 추가 완료\", { description: `${newGame.name}이 추가되었습니다.` })\n    } catch {\n      toast.error(\"게임 추가 실패\", { description: \"게임 추가 중 오류가 발생했습니다.\" })\n    }\n  }\n\n  // Request scheduled users and open modal\n  const requestDeleteCustomGame = async (gameId: number, gameName: string) => {\n    try {\n      const data = await gameService.getScheduledUsers(serverId, gameId)\n      setScheduledUsers(data.users.map(u => u.username))\n      setDeletingGameId(gameId)\n      setDeletingGameName(gameName)\n      setShowDeleteModal(true)\n    } catch {\n      toast.error(\"예약자 조회 실패\", { description: \"예약된 사용자를 불러오는데 실패했습니다.\" })\n    }\n  }\n\n  // Confirm deletion\n  const confirmDelete = async () => {\n    if (deletingGameId == null) return\n    try {\n      await gameService.deleteCustomGame(serverId, deletingGameId)\n      setCustomGames(prev => prev.filter(g => g.id !== deletingGameId))\n      toast.success(\"게임 삭제 완료\", { description: `${deletingGameName}과 예약 기록이 삭제되었습니다.` })\n    } catch {\n      toast.error(\"게임 삭제 실패\", { description: \"게임 삭제 중 오류가 발생했습니다.\" })\n    } finally {\n      setShowDeleteModal(false)\n      setDeletingGameId(null)\n      setDeletingGameName(\"\")\n      setScheduledUsers([])\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass border-white/20 h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-black flex items-center\">\n            <Gamepad2 className=\"mr-2 h-5 w-5\" /> 게임 관리\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div>로딩 중...</div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <>\n      <Card className=\"glass border-white/20 h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Gamepad2 className=\"mr-2 h-5 w-5\" /> 게임 관리\n          </CardTitle>\n          <CardDescription className=\"text-white/70\">기본 게임과 커스텀 게임을 관리하세요</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-white font-medium mb-3\">커스텀 게임</h3>\n            <form onSubmit={handleAddCustomGame} className=\"flex gap-2 mb-3\">\n              <Input\n                value={newGameName}\n                onChange={e => setNewGameName(e.target.value)}\n                placeholder=\"게임 이름\"\n                className=\"glass border-white/30 text-white placeholder:text-white/50 text-sm\"\n              />\n              <Button type=\"submit\" size=\"sm\" className=\"glass-button hover:bg-black/10\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </form>\n            <div className=\"space-y-2\">\n              {customGames.map(game => (\n                <div key={game.id} className=\"flex items-center justify-between p-2 glass rounded-lg hover:bg-black/10\">\n                  <span className=\"text-white text-sm\">{game.name}</span>\n                  <Button\n                    onClick={() => requestDeleteCustomGame(game.id, game.name)}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"text-red-400 hover:text-red-300 hover:bg-red-500/20\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Deletion Confirmation Modal */}\n      <Dialog open={showDeleteModal} onOpenChange={setShowDeleteModal}>\n        <DialogContent className=\"glass border-white/20 max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">{deletingGameName} 삭제 확인</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-white\">\n            <p>다음 사용자가 예약한 기록이 있습니다:</p>\n            <ul className=\"list-disc list-inside mt-2 space-y-1\">\n              {scheduledUsers.map(user => (\n                <li key={user}>{user}</li>\n              ))}\n            </ul>\n            <p className=\"mt-4\">정말로 삭제하시겠습니까?</p>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"outline\" className=\"glass border-white/30 text-white\">\n                취소\n              </Button>\n            </DialogClose>\n            <Button onClick={confirmDelete} className=\"glass-button text-white\">\n              예, 삭제합니다\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n",
            "navbar.tsx": "\"use client\"\n\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { authService } from \"@/lib/auth-service\"\nimport { toast } from \"sonner\"\nimport { GamepadIcon, LogOut, Home } from \"lucide-react\"\n\nexport function Navbar() {\n  const router = useRouter()\n\n  const handleLogout = async () => {\n    try {\n      await authService.logout()\n      toast.success(\"로그아웃 완료\", {\n        description: \"성공적으로 로그아웃되었습니다.\",\n      })\n      router.push(\"/auth/login\")\n    } catch (error) {\n      toast.error(\"로그아웃 실패\", {\n        description: \"로그아웃 중 오류가 발생했습니다.\",\n      })\n    }\n  }\n\n  return (\n    <nav className=\"glass border-b border-white/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n            <GamepadIcon className=\"h-8 w-8 text-white\" />\n            <span className=\"text-xl font-bold text-white\">Game Scheduler</span>\n          </Link>\n\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/dashboard\">\n              <Button variant=\"ghost\" className=\"text-white hover:bg-white/20\">\n                <Home className=\"mr-2 h-4 w-4\" />\n                대시보드\n              </Button>\n            </Link>\n            <Button onClick={handleLogout} variant=\"ghost\" className=\"text-white hover:bg-white/20\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              로그아웃\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n",
            "search-server-modal.tsx": "\"use client\"\n\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\n\ninterface Server {\n  id: number\n  name: string\n  owner: string\n  members: string[]\n  resetTime: string\n}\n\ninterface Props {\n  open: boolean\n  onClose: () => void\n  onJoinSuccess: () => void\n}\n\nexport function SearchServerModal({ open, onClose, onJoinSuccess }: Props) {\n  const [list, setList] = useState<Server[]>([])\n  const [page, setPage] = useState(0)\n  const [query, setQuery] = useState(\"\")\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  const load = async (reset = false) => {\n    try {\n      const data = await serverService.searchServers({ page, size: 10, q: query || undefined })\n      setList(prev => (reset ? data : [...prev, ...data]))\n    } catch {\n      toast.error(\"검색 실패\", { description: \"서버 검색 중 오류가 발생했습니다.\" })\n    }\n  }\n\n  useEffect(() => {\n    if (open) {\n      setPage(0)\n      load(true)\n    }\n  }, [open, query])\n\n  useEffect(() => {\n    if (page > 0) load()\n  }, [page])\n\n  const onScroll = () => {\n    const el = containerRef.current\n    if (el && el.scrollTop + el.clientHeight >= el.scrollHeight - 10) {\n      setPage(prev => prev + 1)\n    }\n  }\n\n  const handleJoin = async (id: number) => {\n    try {\n      await serverService.joinServer(id)\n      toast.success(\"참가 완료\", { description: \"서버 참가에 성공했습니다.\" })\n      onJoinSuccess()\n      onClose()\n    } catch {\n      toast.error(\"참가 실패\", { description: \"서버 참가에 실패했습니다.\" })\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass border-white/20\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">서버 찾기</DialogTitle>\n        </DialogHeader>\n        <div className=\"p-4\">\n          <Input\n            placeholder=\"서버 이름으로 검색\"\n            value={query}\n            onChange={e => setQuery(e.target.value)}\n            className=\"glass border-white/30 text-white mb-4\"\n          />\n          <div ref={containerRef} onScroll={onScroll} className=\"max-h-64 overflow-y-auto space-y-2\">\n            {list.map(s => (\n              <div key={s.id} className=\"flex items-center justify-between p-2 glass rounded-lg\">\n                <span className=\"text-white\">{s.name}</span>\n                <Button size=\"sm\" onClick={() => handleJoin(s.id)} className=\"glass-button\">\n                  참가\n                </Button>\n              </div>\n            ))}\n            {list.length === 0 && <div className=\"text-center text-white/60\">검색 결과가 없습니다.</div>}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
            "server-overview.tsx": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"sonner\"\nimport { authService } from \"@/lib/auth-service\"\nimport { Users, Crown, Shield, Settings, BarChart3 } from \"lucide-react\"\nimport Link from \"next/link\"\n\ninterface Server {\n  id: number\n  name: string\n  owner: string\n  members: string[]\n  admins: string[]\n  resetTime: string\n}\n\ninterface ServerOverviewProps {\n  server: Server\n  onServerUpdate: (server: Server) => void\n}\n\nexport function ServerOverview({ server, onServerUpdate }: ServerOverviewProps) {\n  const [isLoading, setIsLoading] = useState(false)\n  const currentUser = authService.getCurrentUser()\n  const isOwner = server.owner === currentUser\n  const isAdmin = server.admins.includes(currentUser || \"\")\n\n  const handleKickMember = async (username: string) => {\n    if (!confirm(`${username}을(를) 강퇴하시겠습니까?`)) return\n\n    setIsLoading(true)\n    try {\n      toast.error(\"기능 준비 중\", {\n        description: \"멤버 강퇴 기능은 준비 중입니다.\",\n      })\n    } catch {\n      toast.error(\"강퇴 실패\", {\n        description: \"멤버 강퇴 중 오류가 발생했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"glass border-white/20 h-full\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center\">\n          <Users className=\"mr-2 h-5 w-5 text-white\" />\n          서버 개요\n        </CardTitle>\n        <CardDescription className=\"text-white/70\">서버 정보와 멤버를 관리하세요</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* 서버 정보 */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-white font-medium\">서버 정보</h3>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-white/70\">서버 이름:</span>\n              <span className=\"text-white\">{server.name}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-white/70\">초기화 시간:</span>\n              <span className=\"text-white\">{server.resetTime}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-white/70\">총 멤버:</span>\n              <span className=\"text-white\">{server.members.length}명</span>\n            </div>\n          </div>\n        </div>\n\n        {/* 멤버 목록 */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-white font-medium\">멤버 목록</h3>\n          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n            {server.members.map((member) => (\n              <div\n                key={member}\n                className=\"flex items-center justify-between pl-4 p-2 glass rounded-lg hover:bg-black/10\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-white text-sm\">{member}</span>\n                  {server.owner === member && <Crown className=\"h-4 w-4 text-yellow-400\" />}\n                  {server.admins.includes(member) && server.owner !== member && (\n                    <Shield className=\"h-4 w-4 text-blue-400\" />\n                  )}\n                </div>\n                {(isOwner || isAdmin) && member !== server.owner && member !== currentUser && (\n                  <Button\n                    onClick={() => handleKickMember(member)}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"text-red-400 hover:text-red-300 hover:bg-red-500/20\"\n                    disabled={isLoading}\n                  >\n                    강퇴\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* 액션 버튼 */}\n        <div className=\"space-y-2\">\n          <Link href={`/stats/${server.id}`}>\n            <Button\n              variant=\"outline\"\n              className=\"w-full glass border-white/30 text-white hover:bg-black/10 hover:text-white\"\n            >\n              <BarChart3 className=\"mr-2 h-4 w-4 text-white\" />\n              통계 보기\n            </Button>\n          </Link>\n          {(isOwner || isAdmin) && (\n            <Button\n              variant=\"outline\"\n              className=\"w-full glass border-white/30 text-white hover:bg-black/10 hover:text-white\"\n            >\n              <Settings className=\"mr-2 h-4 w-4 text-white\" />\n              서버 설정\n            </Button>\n          )}\n        </div>\n\n        {/* 권한 표시 */}\n        <div className=\"pt-4 border-t border-white/20\">\n          <div className=\"flex flex-wrap gap-2\">\n            {isOwner && (\n              <Badge variant=\"secondary\" className=\"glass text-white hover:bg-black/10\">\n                <Crown className=\"mr-1 h-3 w-3 text-white\" />\n                소유자\n              </Badge>\n            )}\n            {isAdmin && !isOwner && (\n              <Badge variant=\"secondary\" className=\"glass text-white hover:bg-black/10\">\n                <Shield className=\"mr-1 h-3 w-3 text-white\" />\n                관리자\n              </Badge>\n            )}\n            <Badge variant=\"outline\" className=\"glass border-white/30 text-white hover:bg-black/10\">\n              멤버\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
            "timetable-view.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Select,\n  SelectGroup,\n  SelectLabel,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"sonner\"\nimport { timetableService } from \"@/lib/timetable-service\"\nimport { gameService } from \"@/lib/game-service\"\nimport { Calendar, Clock, Filter } from \"lucide-react\"\n\ninterface TimetableEntry {\n  id: number\n  user: string\n  slot: string\n  gameId: number\n  gameName: string\n  custom: boolean\n}\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface TimetableViewProps {\n  serverId: number\n}\n\nexport function TimetableView({ serverId }: TimetableViewProps) {\n  const today = new Date().toISOString().split(\"T\")[0]\n\n  const [entries, setEntries] = useState<TimetableEntry[]>([])\n  const [defaultGames, setDefaultGames] = useState<Game[]>([])\n  const [customGames, setCustomGames] = useState<Game[]>([])\n  const [selectedDate, setSelectedDate] = useState<string>(today)\n  const [selectedTime, setSelectedTime] = useState<string>(\"\")\n  const [selectedGame, setSelectedGame] = useState<string>(\"\")\n  const [gameFilter, setGameFilter] = useState<string>(\"\")\n  const [sortByGame, setSortByGame] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    loadData()\n  }, [serverId])\n\n  useEffect(() => {\n    loadTimetable()\n  }, [gameFilter, sortByGame])\n\n  const loadData = async () => {\n    try {\n      const [defaultData, customData] = await Promise.all([\n        gameService.getDefaultGames(),\n        gameService.getCustomGames(serverId),\n      ])\n      setDefaultGames(defaultData.defaultGames)\n      setCustomGames(customData.customGames)\n      await loadTimetable()\n    } catch {\n      toast.error(\"데이터 로드 실패\", { description: \"데이터를 불러오는데 실패했습니다.\" })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const loadTimetable = async () => {\n    try {\n      const data = await timetableService.getTimetable(serverId, gameFilter, sortByGame)\n      setEntries(data)\n    } catch {\n      toast.error(\"타임테이블 로드 실패\", { description: \"타임테이블을 불러오는데 실패했습니다.\" })\n    }\n  }\n\n  const handleAddEntry = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!selectedDate || !selectedTime || !selectedGame) {\n      toast.error(\"입력 오류\", { description: \"모든 필드를 입력해주세요.\" })\n      return\n    }\n\n    const slot = `${selectedDate}T${selectedTime}:00`\n    const [gameType, gameId] = selectedGame.split(\"-\")\n\n    try {\n      await timetableService.addEntry({\n        serverId,\n        slot,\n        defaultGameId: gameType === \"default\" ? Number(gameId) : undefined,\n        customGameId: gameType === \"custom\" ? Number(gameId) : undefined,\n      })\n\n      await loadTimetable()\n      setSelectedDate(today)\n      setSelectedTime(\"\")\n      setSelectedGame(\"\")\n\n      toast.success(\"예약 완료\", { description: \"게임이 예약되었습니다.\" })\n    } catch {\n      toast.error(\"예약 실패\", { description: \"게임 예약 중 오류가 발생했습니다.\" })\n    }\n  }\n\n  const formatDateTime = (dateTime: string) => {\n    return new Date(dateTime).toLocaleString(\"ko-KR\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass border-white/20 h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Calendar className=\"mr-2 h-5 w-5 text-white\" />\n            타임테이블\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-white/70\">로딩 중...</div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"glass border-white/20 h-full\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center\">\n          <Calendar className=\"mr-2 h-5 w-5 text-white\" />\n          타임테이블\n        </CardTitle>\n        <CardDescription className=\"text-white/70\">게임 세션을 예약하고 관리하세요</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* 예약 추가 폼 */}\n        <form onSubmit={handleAddEntry} className=\"space-y-4 p-4 glass rounded-lg\">\n          <h3 className=\"text-white font-medium\">새 예약 추가</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              required\n            />\n            <Input\n              type=\"time\"\n              value={selectedTime}\n              onChange={(e) => setSelectedTime(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              required\n            />\n          </div>\n          <Select value={selectedGame} onValueChange={setSelectedGame} defaultValue=\"\">\n            <SelectTrigger className=\"glass border-white/30 text-white\">\n              <SelectValue placeholder=\"게임 선택\" />\n            </SelectTrigger>\n            <SelectContent className=\"glass border-white/20 text-white\">\n              <SelectGroup>\n                <SelectLabel>기본 게임</SelectLabel>\n                {defaultGames.map((game) => (\n                  <SelectItem key={`default-${game.id}`} value={`default-${game.id}`}>\n                    {`${game.name} (기본)`}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n              <SelectGroup>\n                <SelectLabel>커스텀 게임</SelectLabel>\n                {customGames.map((game) => (\n                  <SelectItem key={`custom-${game.id}`} value={`custom-${game.id}`}>\n                    {`${game.name} (커스텀)`}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n          <Button type=\"submit\" className=\"w-full glass-button text-white hover:bg-black/10\">\n            예약 추가\n          </Button>\n        </form>\n\n        {/* 필터 및 정렬 */}\n        <div className=\"flex gap-3\">\n          <Input\n            placeholder=\"게임 이름으로 필터\"\n            value={gameFilter}\n            onChange={(e) => setGameFilter(e.target.value)}\n            className=\"glass border-white/30 text-white placeholder:text-white/50\"\n          />\n          <Button\n            onClick={() => setSortByGame(!sortByGame)}\n            variant=\"outline\"\n            className={`glass border-white/30 text-white hover:bg-black/10 ${sortByGame ? \"bg-white/10\" : \"\"}`}\n          >\n            <Filter className=\"mr-2 h-4 w-4 text-white \" />\n            게임순\n          </Button>\n        </div>\n\n        {/* 타임테이블 엔트리 */}\n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {entries.map((entry) => (\n            <div key={entry.id} className=\"p-3 glass rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-4 w-4 text-white/60\" />\n                  <span className=\"text-white font-medium\">{formatDateTime(entry.slot)}</span>\n                </div>\n                <Badge variant={entry.custom ? \"secondary\" : \"default\"} className=\"glass text-white hover:bg-black/10\">\n                  {entry.custom ? \"커스텀\" : \"기본\"}\n                </Badge>\n              </div>\n              <div className=\"text-white/80 text-sm\">\n                <div>게임: {entry.gameName}</div>\n                <div>플레이어: {entry.user}</div>\n              </div>\n            </div>\n          ))}\n          {entries.length === 0 && (\n            <div className=\"text-center py-8 text-white/60\">예약된 게임이 없습니다.</div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n"
        },
        "ui": {
            "__files__": {
                "badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
                "button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
                "card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
                "dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
                "input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
                "label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
                "select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            }
        }
    },
    "lib": {
        "__files__": {
            "auth-service.ts": "const API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface LoginRequest {\n  username: string\n  password: string\n}\n\ninterface SignupRequest {\n  username: string\n  password: string\n}\n\ninterface LoginResponse {\n  token: string\n  message: string\n}\n\ninterface SignupResponse {\n  message: string\n}\n\nclass AuthService {\n  private tokenKey = \"auth-token\"\n  private userKey = \"current-user\"\n\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await fetch(`${API_BASE}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(credentials),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Login failed\")\n    }\n\n    const data: LoginResponse = await response.json()\n\n    // Store token and user info\n    localStorage.setItem(this.tokenKey, data.token)\n    localStorage.setItem(this.userKey, credentials.username)\n\n    return data\n  }\n\n  async signup(credentials: SignupRequest): Promise<SignupResponse> {\n    const response = await fetch(`${API_BASE}/auth/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(credentials),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Signup failed\")\n    }\n\n    return response.json()\n  }\n\n  async logout(): Promise<void> {\n    const token = this.getToken()\n    if (token) {\n      try {\n        await fetch(`${API_BASE}/auth/logout`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n      } catch (error) {\n        console.error(\"Logout request failed:\", error)\n      }\n    }\n\n    localStorage.removeItem(this.tokenKey)\n    localStorage.removeItem(this.userKey)\n  }\n\n  getToken(): string | null {\n    if (typeof window === \"undefined\") return null\n    return localStorage.getItem(this.tokenKey)\n  }\n\n  getCurrentUser(): string | null {\n    if (typeof window === \"undefined\") return null\n    return localStorage.getItem(this.userKey)\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken()\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken()\n    return token ? { Authorization: `Bearer ${token}` } : {}\n  }\n}\n\nexport const authService = new AuthService()\n",
            "fetch-with-auth.ts": "// lib/fetch-with-auth.ts\nimport { authService } from \"./auth-service\"\n\nexport async function fetchWithAuth(input: RequestInfo, init: RequestInit = {}) {\n  const headers = {\n    ...init.headers,\n    ...authService.getAuthHeaders(),\n  }\n\n  const res = await fetch(input, { ...init, headers })\n\n  if (res.status === 403) {\n    // 인증 만료\n    authService.logout()\n    // 로그인 페이지로 바로 이동\n    if (typeof window !== \"undefined\") window.location.href = \"/auth/login\"\n    // 이후 코드는 실행되지 않도록\n    throw new Error(\"UNAUTHORIZED\")\n  }\n\n  return res\n}\n",
            "game-service.ts": "import { authService } from \"./auth-service\"\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface DefaultGameListResponse {\n  defaultGames: Game[]\n}\n\ninterface CustomGameListResponse {\n  customGames: Game[]\n}\n\ninterface CustomGameRequest {\n  name: string\n}\n\ninterface ScheduledUserListResponse {\n  users: { username: string }[]\n}\n\nclass GameService {\n  async getDefaultGames(): Promise<DefaultGameListResponse> {\n    const response = await fetch(`${API_BASE}/games/default`, {\n      headers: authService.getAuthHeaders(),\n    })\n    if (!response.ok) throw new Error(\"Failed to fetch default games\")\n    return response.json()\n  }\n\n  async getCustomGames(serverId: number): Promise<CustomGameListResponse> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/custom-games`, {\n      headers: authService.getAuthHeaders(),\n    })\n    if (!response.ok) throw new Error(\"Failed to fetch custom games\")\n    return response.json()\n  }\n\n  async addCustomGame(serverId: number, data: CustomGameRequest): Promise<Game> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/custom-games`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...authService.getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    })\n    if (!response.ok) throw new Error(\"Failed to add custom game\")\n    return response.json()\n  }\n\n  async getScheduledUsers(serverId: number, gameId: number): Promise<ScheduledUserListResponse> {\n    const response = await fetch(\n      `${API_BASE}/servers/${serverId}/custom-games/${gameId}/scheduled-users`,\n      { headers: authService.getAuthHeaders() }\n    )\n    if (!response.ok) throw new Error(\"Failed to fetch scheduled users\")\n    return response.json()\n  }\n\n  async deleteCustomGame(serverId: number, gameId: number): Promise<void> {\n    const response = await fetch(\n      `${API_BASE}/servers/${serverId}/custom-games/${gameId}`,\n      {\n        method: \"DELETE\",\n        headers: authService.getAuthHeaders(),\n      }\n    )\n    if (!response.ok) throw new Error(\"Failed to delete custom game\")\n  }\n}\n\nexport const gameService = new GameService()",
            "server-service.ts": "import { authService } from \"./auth-service\"\nimport { fetchWithAuth } from \"./fetch-with-auth\"\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface Server {\n  id: number\n  name: string\n  owner: string\n  members: string[]\n  admins: string[]\n  resetTime: string\n}\n\ninterface SearchParams {\n  page: number\n  size: number\n  q?: string\n}\n\nclass ServerService {\n  async createServer(data: { name: string; resetTime: string }): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify(data),\n    })\n    if (!res.ok) throw new Error(\"Failed to create server\")\n    return res.json()\n  }\n\n  async getServers(): Promise<Server[]> {\n    const res = await fetch(`${API_BASE}/servers`, { headers: authService.getAuthHeaders() })\n    if (!res.ok) throw new Error(\"Failed to fetch servers\")\n    return res.json()\n  }\n\n    async getServer(id: number): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${id}`, { headers: authService.getAuthHeaders() })\n    if (!res.ok) throw new Error(\"Failed to fetch server\")\n    return res.json()\n  }\n  \n  async getMyServers(): Promise<Server[]> {\n    const res = await fetchWithAuth(`${API_BASE}/servers/mine`)\n    if (!res.ok) throw new Error(\"Failed to fetch my servers\")\n    return res.json()\n  }\n\n  async searchServers(params: SearchParams): Promise<Server[]> {\n    const qs = new URLSearchParams()\n    qs.append(\"page\", params.page.toString())\n    qs.append(\"size\", params.size.toString())\n    if (params.q) qs.append(\"q\", params.q)\n    const res = await fetch(`${API_BASE}/servers/search?${qs}`, { headers: authService.getAuthHeaders() })\n    if (!res.ok) throw new Error(\"Failed to search servers\")\n    return res.json()\n  }\n\n  async joinServer(id: number): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${id}/join`, {\n      method: \"POST\",\n      headers: authService.getAuthHeaders(),\n    })\n    if (!res.ok) throw new Error(\"Failed to join server\")\n    return res.json()\n  }\n}\n\nexport const serverService = new ServerService()\n",
            "timetable-service.ts": "import { authService } from \"./auth-service\"\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface TimetableEntry {\n  id: number\n  user: string\n  slot: string\n  gameId: number\n  gameName: string\n  custom: boolean\n}\n\ninterface TimetableEntryRequest {\n  serverId: number\n  slot: string\n  defaultGameId?: number\n  customGameId?: number\n}\n\ninterface TimetableStats {\n  topGame: string\n  avgSlot: string\n  peakSlot: string\n  peakCount: number\n}\n\nclass TimetableService {\n  async getTimetable(serverId: number, game?: string, sortByGame?: boolean): Promise<TimetableEntry[]> {\n    const params = new URLSearchParams()\n    if (game) params.append(\"game\", game)\n    if (sortByGame) params.append(\"sortByGame\", \"true\")\n\n    const response = await fetch(`${API_BASE}/servers/${serverId}/timetable?${params}`, {\n      headers: authService.getAuthHeaders(),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch timetable\")\n    }\n\n    return response.json()\n  }\n\n  async addEntry(data: TimetableEntryRequest): Promise<TimetableEntry> {\n    const response = await fetch(`${API_BASE}/servers/${data.serverId}/timetable`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...authService.getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to add timetable entry\")\n    }\n\n    return response.json()\n  }\n\n  async getStats(serverId: number): Promise<TimetableStats> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/timetable/stats`, {\n      headers: authService.getAuthHeaders(),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch stats\")\n    }\n\n    return response.json()\n  }\n}\n\nexport const timetableService = new TimetableService()\n",
            "utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
        }
    }
}